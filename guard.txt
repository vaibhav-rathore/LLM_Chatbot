import pdb
import sys
from flask import Flask
from flask import request
from datetime import date
import datetime, time
from flask import jsonify

from main import *
from param_config import *
from log_details import *

app = Flask(__name__)


@app.route('/guardrail',methods = ['POST'])
def guardrail_flask():

    start_time = time.time()
    start_date=str(datetime.datetime.now())

    #Getting Details from API                     
    platform = request.form['platform']
    use_case = request.form['use_case']
    guardrails = request.form['guardrails']
    prompt = request.form['prompt']
    tenant_id = request.form['tenant_id']
    user_id = request.form['user_id']
    token = request.form['token']

    #pdb.set_trace()
    
    #Platform Check
    if platform not in config.platforms:
        error_message =  f"Invalid Platform: {platform}"
        return  jsonify( {'text': 'Please enter a valid platform name', 'status_code': str(400), 'status_message':error_message})

    else: print(f"Going to implement guardrails for {platform}'s {use_case}")
    

    #Token Check
    if token != config.tokens[platform]:
        error_message =  f"Invalid Token: {token}"
        return  jsonify( {'text': 'Please enter a valid token', 'status_code': str(400), 'status_message':error_message})

    else: print("Token Verified")


    #Use Case Check
    if use_case not in config.use_cases[platform].keys():
        error_message =  f"Invalid Use Case: {use_case}"
        return  jsonify( {'text': 'Please enter a valid use case', 'status_code': str(400), 'status_message':error_message})
    

    else: 
        try:    
            pdb.set_trace()
            if len(prompt)>0:
                print('A prompt has been entered')

                log_id = startGenAILog(platform, use_case, prompt, tenant_id,start_date,user_id)
                
                #Calling the Guardrail Funtionality
                #deanonymized_text,scores,status = guardrail_response(platform,use_case,prompt,log_id,guardrails)   
                deanonymized_text,scores,status = guardrail_response(platform,use_case,prompt,log_id,guardrails,user_id)   

                if deanonymized_text:

                    elapsed_time = time.time() - start_time
                    print(f"Total Time Taken: {elapsed_time}")
        
                    if 'ERROR in processing your request.' in deanonymized_text:

                        return  jsonify( {'text': deanonymized_text, 'status_code': str(700),'status_message':'Success','log_id':log_id})

                    elif all(x == 'Passed' for x in status.values()):
                        
                        return  jsonify( {'text': deanonymized_text, 'status_code': str(200),'status_message':'Success','log_id':log_id})

                    else:
                        return  jsonify( {'text': deanonymized_text, 'status':status,'status_code': str(200),'status_message':'Success','log_id':log_id})

                else:

                    error_message = 'Failed'

                    for k,v in status.items():
                        if 'Failed' in v:
                            code = config.guardrail_code[k]

                    return  jsonify( {'text': 'NA', 'status':status,  'scores':scores, 'status_code': code, 'status_message':error_message,'log_id':log_id})
                    
            else:

                error_message = 'Bad Request'
                return  jsonify( {'text': 'Please enter a prompt', 'status_code': str(400), 'status_message':error_message})


        except:

            error_message = 'Bad Request'
            return  jsonify( {'text': error_message, 'status_code': str(400), 'status_message':error_message})

    


if __name__ == "__main__":
    app.run(host='127.0.0.1', port=5000,debug=False, threaded=False)
    # app.run(host='10.17.22.79', port=5001,debug=False, threaded=False)

